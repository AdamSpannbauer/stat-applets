{"version":3,"file":"static/js/108.3dcd75be.chunk.js","mappings":"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","sources":["components/inputs/CurveAreaRadioButtons.jsx","components/inputs/numInputs/AreaNumInput.jsx","components/inputs/numInputs/MeanNumInput.jsx","components/inputs/numInputs/SDNumInput.jsx","components/forms/ZFromPForm.jsx","statistics/zTable/zInvCDF/zInvCDF.js","statistics/zTable/zInvCDF/zFromArea.js","components/plots/z/ZFromPPlotTitle.jsx","components/plots/z/ZFromPPlot.jsx","pages/zTable/ZFromP.jsx","statistics/mathUtils.js","statistics/zTable/constants.js","statistics/zTable/zPDF.js","statistics/zTable/genNormalCurve.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport * as React from 'react';\n\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\n\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\n\nfunction CurveAreaRadioButtons(props) {\n  const { hookSetter, defaultValue } = props;\n\n  const onChange = (event) => {\n    hookSetter(event.target.value);\n  };\n\n  return (\n    <FormControl>\n      <FormLabel id=\"curve-region-radio-buttons-group\">Region</FormLabel>\n      <RadioGroup\n        row\n        onChange={onChange}\n        aria-labelledby=\"curve-region-radio-buttons-group-label\"\n        defaultValue={defaultValue || 'outside'}\n        name=\"curve-region-radio-buttons-group\"\n      >\n        <FormControlLabel value=\"below\" control={<Radio />} label=\"Below\" />\n        <FormControlLabel value=\"above\" control={<Radio />} label=\"Above\" />\n        <FormControlLabel value=\"between\" control={<Radio />} label=\"Between\" />\n        <FormControlLabel value=\"outside\" control={<Radio />} label=\"Outside\" />\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nexport default CurveAreaRadioButtons;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport TextField from '@mui/material/TextField';\n\nfunction AreaInput(props) {\n  const { hookValue, hookSetter, step } = props;\n\n  const onChange = (event) => {\n    let v = event.target.value;\n    if (v < 0) v = 0;\n    if (v > 1) v = 1;\n    hookSetter(v);\n  };\n\n  return (\n    <TextField\n      type=\"number\"\n      label=\"Area\"\n      value={hookValue}\n      inputProps={{\n        min: 0,\n        max: 1,\n        step: step || 0.01,\n      }}\n      onChange={onChange}\n    />\n  );\n}\n\nexport default AreaInput;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport TextField from '@mui/material/TextField';\n\nfunction MeanInput(props) {\n  const { hookValue, hookSetter, step } = props;\n\n  return (\n    <TextField\n      type=\"number\"\n      label=\"Mean\"\n      value={hookValue}\n      inputProps={{\n        step: step || 1.0,\n      }}\n      onChange={(event) => hookSetter(event.target.value)}\n    />\n  );\n}\n\nexport default MeanInput;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport TextField from '@mui/material/TextField';\n\nfunction SDInput(props) {\n  const {\n    hookValue, hookSetter, step, label,\n  } = props;\n\n  const onChange = (event) => {\n    let v = event.target.value;\n    if (v < 0) v = 0;\n    hookSetter(v);\n  };\n\n  return (\n    <TextField\n      type=\"number\"\n      label={label || 'Standard Deviation'}\n      value={hookValue}\n      inputProps={{\n        min: 0,\n        step: step || 0.5,\n      }}\n      onChange={onChange}\n    />\n  );\n}\n\nexport default SDInput;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\n\nimport AreaInput from '../inputs/numInputs/AreaNumInput';\nimport MeanInput from '../inputs/numInputs/MeanNumInput';\nimport SDInput from '../inputs/numInputs/SDNumInput';\nimport CurveAreaRadioButtons from '../inputs/CurveAreaRadioButtons';\n\nfunction ZFromPForm(props) {\n  const { hookValues, hookSetters } = props;\n\n  const {\n    mean, sd, area, curveRegion,\n  } = hookValues;\n\n  const {\n    setMean, setSD, setArea, setCurveRegion,\n  } = hookSetters;\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        width: 'auto',\n        '& .MuiTextField-root': { m: 1, width: '25ch' },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <Grid\n        container\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n\n        <Grid item align=\"center\" xs={12}>\n          <AreaInput hookValue={area} hookSetter={setArea} />\n          <MeanInput hookValue={mean} hookSetter={setMean} />\n          <SDInput hookValue={sd} hookSetter={setSD} />\n        </Grid>\n\n        <Grid item align=\"center\" xs={12}>\n          <CurveAreaRadioButtons\n            hookValue={curveRegion}\n            hookSetter={setCurveRegion}\n            defaultValue={curveRegion}\n          />\n        </Grid>\n\n      </Grid>\n    </Box>\n  );\n}\n\nexport default ZFromPForm;\n","const zInvCDF = (p) => {\n  const a1 = -39.6968302866538;\n  const a2 = 220.946098424521;\n  const a3 = -275.928510446969;\n  const a4 = 138.357751867269;\n  const a5 = -30.6647980661472;\n  const a6 = 2.50662827745924;\n\n  const b1 = -54.4760987982241;\n  const b2 = 161.585836858041;\n  const b3 = -155.698979859887;\n  const b4 = 66.8013118877197;\n  const b5 = -13.2806815528857;\n\n  const c1 = -7.78489400243029E-03;\n  const c2 = -0.322396458041136;\n  const c3 = -2.40075827716184;\n  const c4 = -2.54973253934373;\n  const c5 = 4.37466414146497;\n  const c6 = 2.93816398269878;\n\n  const d1 = 7.78469570904146E-03;\n  const d2 = 0.32246712907004;\n  const d3 = 2.445134137143;\n  const d4 = 3.75440866190742;\n\n  const pLow = 0.02425;\n  const pHigh = 1 - pLow;\n  let q;\n  let r;\n  let retVal;\n\n  if ((p < 0) || (p > 1)) {\n    retVal = 0;\n  } else if (p < pLow) {\n    q = Math.sqrt(-2 * Math.log(p));\n    // eslint-disable-next-line max-len\n    retVal = (((((c1 * q + c2) * q + c3) * q + c4) * q + c5) * q + c6) / ((((d1 * q + d2) * q + d3) * q + d4) * q + 1);\n  } else if (p <= pHigh) {\n    q = p - 0.5;\n    r = q * q;\n    // eslint-disable-next-line max-len, no-mixed-operators\n    retVal = (((((a1 * r + a2) * r + a3) * r + a4) * r + a5) * r + a6) * q / (((((b1 * r + b2) * r + b3) * r + b4) * r + b5) * r + 1);\n  } else {\n    q = Math.sqrt(-2 * Math.log(1 - p));\n    // eslint-disable-next-line max-len\n    retVal = -(((((c1 * q + c2) * q + c3) * q + c4) * q + c5) * q + c6) / ((((d1 * q + d2) * q + d3) * q + d4) * q + 1);\n  }\n\n  return retVal;\n};\n\nexport default zInvCDF;\n","import { MAX_Z, MIN_Z } from '../constants';\nimport zInvCDF from './zInvCDF';\n\nexport const zFromAreaBelow = (area) => {\n  if (area >= 1) return MAX_Z;\n\n  const z = zInvCDF(area);\n  return z;\n};\n\nexport const zFromAreaAbove = (area) => {\n  if (area >= 1) return -MAX_Z;\n\n  const z = zInvCDF(1 - area);\n  return z;\n};\n\nexport const zFromAreaBetween = (area) => {\n  if (area >= 1) return [-MAX_Z, MAX_Z];\n\n  const halfA = (1 - area) / 2;\n  const z = zFromAreaBelow(halfA);\n  return Math.abs(z);\n};\n\nexport const zFromAreaOutside = (area) => {\n  if (area >= 1) return [MIN_Z, -MIN_Z];\n\n  const halfA = area / 2;\n  const z = zFromAreaBelow(halfA);\n  return Math.abs(z);\n};\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nfunction titleStr(mean, sd, area, curveRegion, z) {\n  let zStr = +z.toFixed(3);\n  let scaledZStr = +((z * sd) + mean).toFixed(3);\n  const areaPercentStr = +(100 * area).toFixed(2);\n\n  let z2Str = null;\n  let scaledZ2Str = null;\n  if (['outside', 'between'].includes(curveRegion)) {\n    // eslint-disable-next-line no-param-reassign\n    z = Math.abs(z);\n\n    zStr = -z.toFixed(3);\n    scaledZStr = +((-z * sd) + mean).toFixed(3);\n\n    z2Str = +z.toFixed(3);\n    scaledZ2Str = +((z * sd) + mean).toFixed(3);\n  }\n\n  let res = '';\n  if (curveRegion === 'below') {\n    if (area === 0) {\n      zStr = `-${Infinity}`;\n      scaledZStr = `-${Infinity}`;\n    }\n    res = `${areaPercentStr}% of the data is below ${scaledZStr} (z = ${zStr})`;\n  } else if (curveRegion === 'above') {\n    if (z === Infinity) {\n      zStr = `-${zStr}`;\n      scaledZStr = `-${scaledZStr}`;\n    } else if (area === 0) {\n      zStr = `${Infinity}`;\n      scaledZStr = `${Infinity}`;\n    }\n    res = `${areaPercentStr}% of the data is above ${scaledZStr} (z = ${zStr})`;\n  } else if (curveRegion === 'between') {\n    res = `${areaPercentStr}% of the data is between ${scaledZStr} (z = ${zStr}) & ${scaledZ2Str} (z = ${z2Str})`;\n  } else if (curveRegion === 'outside') {\n    if (z === Infinity) {\n      zStr = '0';\n      scaledZStr = '0';\n    } else if (area === 0) {\n      zStr = `${Infinity}`;\n      scaledZStr = `${Infinity}`;\n    }\n    res = `${areaPercentStr}% of the data is outside ${scaledZStr} (z = ${zStr}) & ${scaledZ2Str} (z = ${z2Str})`;\n  }\n\n  return res;\n}\n\nfunction ZFromPPlotTitle(props) {\n  const {\n    mean, sd, area, curveRegion, z,\n  } = props;\n\n  const title = titleStr(Number(mean), Number(sd), Number(area), curveRegion, Number(z));\n  return <h1 className=\"plot-title\">{title}</h1>;\n}\n\nexport default ZFromPPlotTitle;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport Plot from 'react-plotly.js';\nimport genNormalCurve from '../../../statistics/zTable/genNormalCurve';\n\nimport {\n  zFromAreaBelow, zFromAreaAbove, zFromAreaBetween, zFromAreaOutside,\n} from '../../../statistics/zTable/zInvCDF/zFromArea';\nimport ZFromPPlotTitle from './ZFromPPlotTitle';\n\nconst defineShadedRegionEndPoints = (mean, sd, area, selectedRegion) => {\n  const shadedRegionEndPoints = {\n    r1x1: null, r1x2: null, r2x1: null, r2x2: null, z: null,\n  };\n\n  const maxZ = 5;\n  let z;\n\n  if (area >= 1) {\n    shadedRegionEndPoints.z = Infinity;\n    shadedRegionEndPoints.r1x1 = mean - maxZ * sd;\n    shadedRegionEndPoints.r1x2 = mean + maxZ * sd;\n  } else if (selectedRegion === 'below') {\n    z = zFromAreaBelow(area);\n    shadedRegionEndPoints.z = z;\n\n    shadedRegionEndPoints.r1x1 = mean - maxZ * sd;\n    shadedRegionEndPoints.r1x2 = mean + z * sd;\n  } else if (selectedRegion === 'above') {\n    z = zFromAreaAbove(area);\n    shadedRegionEndPoints.z = z;\n\n    shadedRegionEndPoints.r1x1 = mean + z * sd;\n    shadedRegionEndPoints.r1x2 = mean + maxZ * sd;\n  } else if (selectedRegion === 'between') {\n    z = zFromAreaBetween(area);\n    shadedRegionEndPoints.z = z;\n\n    shadedRegionEndPoints.r1x1 = mean - z * sd;\n    shadedRegionEndPoints.r1x2 = mean + z * sd;\n  } else if (selectedRegion === 'outside') {\n    z = zFromAreaOutside(area);\n    shadedRegionEndPoints.z = z;\n\n    shadedRegionEndPoints.r1x1 = mean - maxZ * sd;\n    shadedRegionEndPoints.r1x2 = mean - z * sd;\n\n    shadedRegionEndPoints.r2x1 = mean + z * sd;\n    shadedRegionEndPoints.r2x2 = mean + maxZ * sd;\n  }\n\n  return shadedRegionEndPoints;\n};\n\nconst genNormalCurvePlotData = (x, y) => {\n  const plotData = {\n    x,\n    y,\n    type: 'scatter',\n    mode: 'lines',\n    hovertemplate: '(%{x:.2f}, %{y:.2f})<extra></extra>',\n    line: { color: '#f77f00' },\n  };\n\n  return plotData;\n};\n\nconst genShadedRegionPlotData = (x, y, x1, x2) => {\n  let minX = Number(x1);\n  let maxX = Number(x2);\n\n  if (minX > maxX) {\n    [minX, maxX] = [maxX, minX];\n  }\n\n  const rx = [];\n  const ry = [];\n\n  for (let i = 0; i < x.length - 1; i += 1) {\n    if (x[i] >= minX && x[i] <= maxX) {\n      rx.push(x[i]);\n      ry.push(y[i]);\n    }\n  }\n\n  return {\n    x: rx,\n    y: ry,\n    type: 'scatter',\n    mode: 'lines',\n    fill: 'tozeroy',\n    hoverinfo: 'skip',\n    line: { color: '#f77f00' },\n  };\n};\n\nfunction ZFromPPlot(props) {\n  const { hookValues } = props;\n  const {\n    mean,\n    sd,\n    area,\n    curveRegion,\n  } = hookValues;\n\n  const {\n    x, y,\n  } = genNormalCurve(Number(mean), Number(sd));\n\n  const {\n    r1x1, r1x2, r2x1, r2x2, z,\n  } = defineShadedRegionEndPoints(Number(mean), Number(sd), Number(area), curveRegion);\n\n  // Just data for curve's line, *no fill*\n  const plotData = [genNormalCurvePlotData(x, y)];\n\n  // Check if shaded regions are requested\n  const plotRegion1 = r1x1 !== null && r1x2 !== null;\n  const plotRegion2 = r2x1 !== null && r2x2 !== null;\n\n  if (plotRegion1) {\n    const shadedRegionPlotData = genShadedRegionPlotData(x, y, r1x1, r1x2);\n\n    plotData.push(shadedRegionPlotData);\n  }\n\n  if (plotRegion2) {\n    const shadedRegionPlotData = genShadedRegionPlotData(x, y, r2x1, r2x2);\n\n    plotData.push(shadedRegionPlotData);\n  }\n\n  if (!plotRegion1 && !plotRegion2) {\n    plotData[0].fill = 'tozeroy';\n  }\n\n  return (\n    <div>\n      <hr />\n      <ZFromPPlotTitle\n        mean={mean}\n        sd={sd}\n        area={area}\n        curveRegion={curveRegion}\n        z={z}\n      />\n      <Plot\n        data={plotData}\n        layout={{\n          xaxis: { zeroline: false },\n          showlegend: false,\n          margin: {\n            l: 50,\n            r: 40,\n            b: 50,\n            t: 40,\n            pad: 4,\n          },\n        }}\n        config={{ displayModeBar: false }}\n      />\n    </div>\n  );\n}\n\nexport default ZFromPPlot;\n","import React, { useState } from 'react';\nimport ZFromPForm from '../../components/forms/ZFromPForm';\nimport ZFromPPlot from '../../components/plots/z/ZFromPPlot';\n\nfunction ZFromP() {\n  const [area, setArea] = useState(0.05);\n  const [mean, setMean] = useState(0);\n  const [sd, setSD] = useState(1);\n\n  const [curveRegion, setCurveRegion] = useState('outside');\n\n  const hookValues = {\n    area, mean, sd, curveRegion,\n  };\n\n  const hookSetters = {\n    setArea, setMean, setSD, setCurveRegion,\n  };\n\n  return (\n    <div className=\"page\">\n      <ZFromPForm hookValues={hookValues} hookSetters={hookSetters} />\n      <ZFromPPlot hookValues={hookValues} />\n    </div>\n  );\n}\n\nexport default ZFromP;\n","export const mapRange = (x, inMin, inMax, outMin, outMax) => {\n  let newX = x;\n\n  newX -= inMin;\n\n  newX *= (outMax - outMin);\n  newX /= (inMax - inMin);\n  newX += outMin;\n\n  return newX;\n};\n\nexport const gamma = (x) => {\n  // Gamma function implemented using the Lanczos approximation.\n  // This is a good general-purpose approximation with a few extra decimal places of precision.\n\n  const p = [\n    0.99999999999980993, 676.5203681218851, -1259.1392167224028,\n    771.32342877765313, -176.61502916214059, 12.507343278686905,\n    -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7,\n  ];\n\n  if (x < 0.5) {\n    return Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  x -= 1;\n  let a = p[0];\n  const t = x + 7.5;\n  for (let i = 1; i < p.length; i += 1) {\n    a += p[i] / (x + i);\n  }\n  // eslint-disable-next-line no-bitwise\n  return Math.sqrt(2 * Math.PI) * t ** (x + 0.5) * Math.exp(-t) * a;\n};\n\nexport const logGamma = (Z) => {\n  // eslint-disable-next-line max-len\n  const S = 1 + 76.18009173 / Z - 86.50532033 / (Z + 1) + 24.01409822 / (Z + 2) - 1.231739516 / (Z + 3) + 0.00120858003 / (Z + 4) - 0.00000536382 / (Z + 5);\n  const LG = (Z - 0.5) * Math.log(Z + 4.5) - (Z + 4.5) + Math.log(S * 2.50662827465);\n\n  return LG;\n};\n\nexport const incompleteBeta = (X, A, B) => {\n  // Compute the incomplete beta function I_x(a, b).\n  let A0 = 0;\n  let B0 = 1;\n  let A1 = 1;\n  let B1 = 1;\n  let M9 = 0;\n  let A2 = 0;\n  let C9;\n  while (Math.abs((A1 - A2) / A1) > 0.00001) {\n    A2 = A1;\n    // eslint-disable-next-line no-mixed-operators\n    C9 = -(A + M9) * (A + B + M9) * X / (A + 2 * M9) / (A + 2 * M9 + 1);\n    A0 = A1 + C9 * A0;\n    B0 = B1 + C9 * B0;\n    M9 += 1;\n    // eslint-disable-next-line no-mixed-operators\n    C9 = M9 * (B - M9) * X / (A + 2 * M9 - 1) / (A + 2 * M9);\n    A1 = A0 + C9 * A1;\n    B1 = B0 + C9 * B1;\n    A0 /= B1;\n    B0 /= B1;\n    A1 /= B1;\n    B1 = 1;\n  }\n  return A1 / A;\n};\n","/* eslint-disable import/prefer-default-export */\nexport const MIN_Z = 0.0001;\nexport const MAX_Z = 5;\n","const zPDF = (x, mean, sd) => Math.exp((-0.5) * ((x - mean) / sd) ** 2);\n\nexport default zPDF;\n","import { mapRange } from '../mathUtils';\nimport { MAX_Z } from './constants';\nimport zPDF from './zPDF';\n\nconst genNormalCurve = (mean, sd, nSteps = 512) => {\n  const minX = mean - MAX_Z * sd;\n  const maxX = mean + MAX_Z * sd;\n\n  const steps = Array.from({ length: nSteps }).map((_, i) => i);\n  const x = steps.map((n) => mapRange(n, 0, nSteps - 1, minX, maxX));\n  const y = x.map((xi) => zPDF(xi, mean, sd));\n\n  return {\n    x, y, minX, maxX, minY: Math.min(...y), maxY: Math.min(...y),\n  };\n};\n\nexport default genNormalCurve;\n"],"names":["props","hookSetter","defaultValue","id","row","onChange","event","target","value","name","control","label","hookValue","step","type","inputProps","min","max","v","hookValues","hookSetters","mean","sd","area","curveRegion","setMean","setSD","setArea","setCurveRegion","Box","component","sx","width","m","noValidate","autoComplete","Grid","container","alignItems","justifyContent","item","align","xs","CurveAreaRadioButtons","p","q","r","c1","c2","c3","c4","c5","c6","d1","d2","d3","d4","pLow","Math","sqrt","log","zFromAreaBelow","MAX_Z","zInvCDF","z","title","zStr","toFixed","scaledZStr","areaPercentStr","z2Str","scaledZ2Str","includes","abs","res","Infinity","titleStr","Number","className","defineShadedRegionEndPoints","selectedRegion","shadedRegionEndPoints","r1x1","r1x2","r2x1","r2x2","zFromAreaAbove","zFromAreaBetween","MIN_Z","zFromAreaOutside","genNormalCurvePlotData","x","y","mode","hovertemplate","line","color","genShadedRegionPlotData","x1","x2","minX","maxX","rx","ry","i","length","push","fill","hoverinfo","genNormalCurve","plotData","plotRegion1","plotRegion2","shadedRegionPlotData","data","layout","xaxis","zeroline","showlegend","margin","l","b","t","pad","config","displayModeBar","useState","mapRange","inMin","inMax","outMin","outMax","newX","gamma","PI","sin","a","exp","logGamma","Z","S","incompleteBeta","X","A","B","C9","A0","B0","A1","B1","M9","A2","nSteps","steps","Array","from","map","_","n","xi","zPDF","minY","maxY"],"sourceRoot":""}